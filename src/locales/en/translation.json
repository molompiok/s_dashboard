{
    "common": {
        "loading": "Loading...",
        "error": "Error",
        "success": "Success",
        "cancel": "Cancel",
        "save": "Save",
        "delete": "Delete",
        "confirm": "Confirm",
        "edit": "Edit",
        "create": "Create",
        "view": "View",
        "close": "Close",
        "requiredField": "Required field",
        "optionalField": "Optional field",
        "noResults": "No results found.",
        "back": "Back",
        "seeMore": "See more",
        "seeAll": "See all"
    },
    "validationFailed": "Data validation failed.",
    "unauthorized_action": "You don't have permission to perform this action.",
    "auth_required": "Authentication required.",
    "missing_parameter": "The '{{field}}' field is required.",
    "invalid_type": "The type of the '{{field}}' field is invalid.",
    "not_found": "The requested item could not be found.",
    "error_occurred": "An error occurred. Please try again later.",
    "invalid_value": "The value of the '{{key}}' field is invalid: {{value}}",
    "api": {
        "apiUrlRequired": "The API URL is required to initialize the client.",
        "parseError": "Error parsing the API response.",
        "networkError": "Network error or unable to reach the API.",
        "unknownError": "An unknown error occurred during the API request.",
        "httpError": {
            "400": "Invalid request.",
            "401": "Authentication required.",
            "403": "Access denied.",
            "404": "Resource not found.",
            "422": "Invalid data provided.",
            "500": "Internal server error.",
            "503": "Service unavailable."
        },
        "contextError": {
            "noStoreUrl": "Error: Unable to initialize API. No store URL selected.",
            "providerMissing": "Error: Sublymus API context is not available. Ensure the app is wrapped in SublymusApiProvider."
        }
    },
    "auth": {
        "socialCallbackFailed": "Internal error while processing social login.",
        "emailNotVerified": "Please verify your email address before logging in.",
        "loginSuccess": "Login successful.",
        "invalidCredentials": "Incorrect email or password.",
        "loginFailed": "Login failed.",
        "emailConflict": "An account with this email already exists.",
        "registerSuccess": "Registration successful! Please check your email to activate your account.",
        "registerFailed": "An error occurred during registration.",
        "invalidOrExpiredToken": "The verification link is invalid or has expired.",
        "emailAlreadyVerified": "Your email is already verified.",
        "emailVerificationSuccess": "Email verified successfully. You can now log in.",
        "emailVerificationFailedDb": "Error updating email verification.",
        "resendGenericResponse": "If an account with this email exists and is not verified, a new verification email has been sent.",
        "logoutAllSuccess": "Logged out from all devices successfully.",
        "logoutAllFailed": "Failed to log out from all devices.",
        "notAuthenticated": "User not authenticated.",
        "logoutSuccess": "Logout successful.",
        "logoutCompletedWithIssues": "Logout completed (session/token may already be invalid).",
        "fetchMeFailed": "Error fetching user information.",
        "profileUpdateSuccess": "Profile updated successfully.",
        "profileUpdateFailed": "Profile update failed.",
        "accountDeleteSuccess": "Account deleted successfully.",
        "accountDeleteFailed": "Failed to delete account."
    },
    "emails": {
        "verifySubject": "Verify your email address - Sublymus"
    },
    "product": {
        "viewRequired": "A main image is required for the product.",
        "priceTooHigh": "The price must not exceed {{max}}.",
        "barredPriceTooHigh": "The crossed-out price must not exceed {{max}}.",
        "barredPriceInvalid": "The crossed-out price must be greater than 0.",
        "priceInvalid": "The product price must be greater than 0.",
        "defaultVariantFeatureName": "Default Variant",
        "createdSuccess": "Product created successfully.",
        "creationFailed": "Product creation failed.",
        "fetchFailed": "Error fetching products.",
        "updateSuccess": "Product updated successfully.",
        "updateFailed": "Product update failed.",
        "deleteSuccess": "Product deleted successfully.",
        "deleteFailed": "Product deletion failed.",
        "notFound": "Product not found.",
        "barredPriceInvalidRange": "The crossed-out price must be a positive number less than or equal to {{max}}.",
        "priceInvalidRange": "The price must be a positive number less than or equal to {{max}}."
    },
    "category": {
        "notFound": "Category not found.",
        "fetchFailed": "Error fetching categories.",
        "fetchSubFailed": "Error fetching subcategories.",
        "fetchFiltersFailed": "Error fetching filters.",
        "parentNotFound": "The parent category (ID: {{id}}) was not found.",
        "createdSuccess": "Category created successfully.",
        "creationFailed": "Category creation failed.",
        "cannotBeOwnParent": "A category cannot be its own parent.",
        "fileUpdateFailed": "Failed to update the '{{field}}' file.",
        "updateSuccess": " collapsible-item-headerCategory updated successfully.",
        "updateFailed": "Category update failed.",
        "deleteSuccess": "Category deleted successfully.",
        "deleteFailed": "Category deletion failed."
    },
    "feature": {
        "createdSuccess": "Feature created successfully.",
        "creationFailed": "Feature creation failed.",
        "fetchFailed": "Error fetching features.",
        "fetchWithValuesFailed": "Error fetching features and their values.",
        "updateSuccess": "Feature updated successfully.",
        "updateFailed": "Feature update failed.",
        "deleteSuccess": "Feature deleted successfully.",
        "deleteFailed": "Feature deletion failed.",
        "notFound": "Feature not found.",
        "multipleUpdateSuccess": "Multiple features and values updated successfully.",
        "multipleUpdateFailed": "Multiple features and values update failed.",
        "invalidJsonPayload": "Invalid data for multiple updates (JSON format expected).",
        "cannotDeleteDefault": "Cannot delete the product's default feature."
    },
    "value": {
        "invalidColorKey": "The color key '{{key}}' is invalid for the value {{value}}.",
        "textRequired": "Text is required for this type of value.",
        "createdSuccess": "Value created successfully.",
        "creationFailed": "Value creation failed.",
        "fetchFailed": "Error fetching values.",
        "updateSuccess": "Value updated successfully.",
        "updateFailed": "Value update failed.",
        "deleteFailed": "Value deletion failed.",
        "notFound": "Value not found.",
        "idRequired": "The value ID is required.",
        "orFeatureNotFound": "Value or parent feature not found."
    },
    "detail": {
        "createdSuccess": "Detail created successfully.",
        "creationFailed": "Detail creation failed.",
        "idOrProductIdRequired": "The detail or product ID is required.",
        "notFound": "Detail not found.",
        "fetchFailed": "Error fetching details.",
        "updateSuccess": "Detail updated successfully.",
        "updateFailed": "Detail update failed.",
        "deleteSuccess": "Detail deleted successfully.",
        "deleteFailed": "Detail deletion failed.",
        "idRequired": "The detail ID is required."
    },
    "favorite": {
        "alreadyExists": "This product is already in your favorites.",
        "createdSuccess": "Product added to favorites successfully.",
        "creationFailed": "Failed to add product to favorites.",
        "notFound": "Favorite not found.",
        "fetchFailed": "Error fetching favorites.",
        "updateSuccess": "Favorite updated successfully.",
        "updateFailed": "Favorite update failed.",
        "deleteSuccess": "Favorite deleted successfully.",
        "deleteFailed": "Favorite deletion failed."
    },
    "globalSearch": {
        "searchFailed": "Global search failed."
    },
    "importExport": {
        "noDataToImport": "No product or category data provided for import.",
        "importSuccess": "Data imported successfully.",
        "importFailed": "Data import failed.",
        "exportFailed": "Data export failed."
    },
    "inventory": {
        "createdSuccess": "Inventory item created successfully.",
        "creationFailed": "Inventory item creation failed.",
        "notFound": "Inventory item not found.",
        "fetchFailed": "Error fetching inventory items.",
        "updateSuccess": "Inventory item updated successfully.",
        "updateFailed": "Inventory item update failed.",
        "deleteSuccess": "Inventory item deleted successfully.",
        "deleteFailed": "Inventory item deletion failed.",
        "idRequired": "The inventory item ID is required."
    },
    "collaborator": {
        "userNotFound": "User with email {{email}} not found.",
        "cannotAddOwner": "You cannot add the owner as a collaborator.",
        "alreadyCollaborator": "This user is already a collaborator.",
        "createdSuccess": "Collaborator added successfully.",
        "creationFailed": "Failed to add collaborator.",
        "cannotEditOwnerPerms": "You cannot edit the owner's permissions.",
        "notFound": "Collaborator not found.",
        "permsUpdateSuccess": "Collaborator permissions updated successfully.",
        "permsUpdateFailed": "Failed to update permissions.",
        "listFailed": "Failed to list collaborators.",
        "cannotRemoveOwner": "You cannot remove the owner.",
        "removeSuccess": "Collaborator removed successfully.",
        "removeFailed": "Failed to remove collaborator."
    },
    "stats": {
        "fetchFailed": "Error fetching statistics."
    },
    "address": {
        "createdSuccess": "Address created successfully.",
        "creationFailed": "Address creation failed.",
        "notFound": "Address not found.",
        "fetchFailed": "Error fetching addresses.",
        "updateSuccess": "Address updated successfully.",
        "updateFailed": "Address update failed.",
        "deleteFailed": "Address deletion failed."
    },
    "phone": {
        "createdSuccess": "Phone number created successfully.",
        "creationFailed": "Phone number creation failed.",
        "notFound": "Phone number not found.",
        "fetchFailed": "Error fetching phone numbers.",
        "updateSuccess": "Phone number updated successfully.",
        "updateFailed": "Phone number update failed.",
        "deleteFailed": "Phone number deletion failed."
    },
    "order": {
        "cartEmpty": "The cart is empty. Cannot create an order.",
        "createdSuccess": "Order created successfully.",
        "creationFailed": "Order creation failed.",
        "cartNotFound": "Cart not found for this user.",
        "fetchFailed": "Error fetching orders.",
        "fetchAllFailed": "Error fetching the list of orders.",
        "notFound": "Order not found.",
        "invalidStatusTransition": "Cannot change status from '{{from}}' to '{{to}}'.",
        "updateSuccess": "Order updated successfully.",
        "updateFailed": "Order update failed.",
        "deleteSuccess": "Order deleted successfully.",
        "deleteFailed": "Order deletion failed."
    },
    "visit": {
        "throttled": "Last visit too recent (less than an hour).",
        "recordedSuccess": "New visit recorded.",
        "recordFailed": "Failed to record visit.",
        "fetchFailed": "Error fetching visit data."
    },
    "debug": {
        "storeIdMissing": "Internal configuration missing: STORE_ID is not set.",
        "scaleUpSent": "Resource increase request sent (Job ID: {{jobId}}).",
        "scaleUpFailed": "Failed to send resource increase request.",
        "scaleDownSent": "Resource decrease request sent (Job ID: {{jobId}}).",
        "scaleDownFailed": "Failed to send resource decrease request."
    },
    "cart": {
        "negativeQuantityNotAllowed": "Quantity cannot be negative.",
        "positiveValueRequiredForIncDec": "The value to increment or decrement must be a positive integer.",
        "cannotDecrement": "Cannot decrement: current quantity ({{current}}) is less than requested ({{requested}}).",
        "maxStockUndefined": "Cannot add maximum quantity: maximum stock not defined for this product/variant.",
        "quantityExceedsStock": "Requested quantity ({{quantity}}) exceeds available stock ({{stock}}).",
        "updateSuccess": "Cart updated successfully (Mode: {{mode}}).",
        "updateFailed": "Error updating cart.",
        "fetchFailed": "Error fetching cart.",
        "noGuestCartToMerge": "No temporary cart to merge.",
        "guestCartEmptyOrNotFound": "Temporary cart empty or not found.",
        "mergeSuccess": "Cart merged successfully.",
        "mergeFailed": "Error merging carts."
    },
    "comment": {
        "orderItemNotFound": "The associated order item was not found.",
        "cannotCommentOthersItem": "You can only comment on items you ordered.",
        "alreadyCommented": "You already left a comment for this item.",
        "createdSuccess": "Comment created successfully.",
        "creationFailed": "Comment creation failed.",
        "notFound": "Comment not found.",
        "notFoundForItem": "No comment found for this order item.",
        "fetchFailed": "Error fetching comment.",
        "fetchListFailed": "Error fetching the list of comments.",
        "cannotUpdateOthers": "You can only edit your own comments.",
        "updateSuccess": "Comment updated successfully.",
        "updateFailed": "Comment update failed.",
        "cannotDeleteOthers": "You can only delete your own comments or have moderation permissions.",
        "deleteSuccess": "Comment deleted successfully.",
        "deleteFailed": "Comment deletion failed."
    },
    "dashboard": {
        "home": "Home",
        "products": "Products",
        "categories": "Categories",
        "orders": "Orders",
        "customers": "Customers",
        "collaborators": "Collaborators",
        "inventory": "Inventory",
        "statistics": "Statistics",
        "settings": "Settings",
        "themeEditor": "Theme Editor",
        "manageProducts": "Manage Products",
        "manageCategories": "Manage Categories",
        "manageStores": "Manage Stores",
        "recentOrders": "Recent Orders",
        "accountTotal": "Account Total",
        "visits": "Visits",
        "totalOrders": "Orders",
        "periods": {
            "day": "Day",
            "week": "Week",
            "month": "Month"
        },
        "orderFilters": {
            "status": "Status",
            "order": "Order",
            "price": "Price",
            "date": "Date",
            "statusValues": {
                "pending": "Pending",
                "confirmed": "Confirmed",
                "canceled": "Canceled",
                "returned": "Returned",
                "delivered": "Delivered",
                "picked_up": "Picked Up",
                "not_delivered": "Not Delivered",
                "not_picked_up": "Not Picked Up",
                "waiting_for_payment": "Waiting for Payment",
                "waiting_picked_up": "Waiting for Pickup"
            },
            "orderValues": {
                "date_desc": "Newest",
                "date_asc": "Oldest",
                "total_price_desc": "High Price",
                "total_price_asc": "Low Price"
            },
            "priceMin": "Minimum Price",
            "priceMax": "Maximum Price",
            "dateRanges": {
                "3_days": "3 days",
                "7_days": "7 days",
                "1_month": "1 month",
                "all": "All"
            },
            "reset": "Reset"
        },
        "searchPlaceholder": "Name, description, #id..."
    }
}