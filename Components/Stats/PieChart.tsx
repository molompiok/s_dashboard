// components/Stats/Charts/PieChart.tsx
import React, { useMemo } from 'react';
import { Pie } from 'react-chartjs-2';
import {
  Chart as ChartJS,
  ArcElement, // üí° AJOUTEZ CET √âL√âMENT FONDAMENTAL POUR LES GRAPHIQUES CIRCULAIRES/DOUGHNUT
  Tooltip,
  Legend, // M√™me si d√©sactiv√© dans les options, l'enregistrer peut √™tre plus s√ªr
  ChartOptions,
  ChartData
} from 'chart.js';
// DateTime n'est pas directement utilis√© ici mais peut l'√™tre pour formater les labels si besoin
// import { DateTime } from 'luxon';

// üí° Enregistrer les composants Chart.js n√©cessaires, incluant ArcElement
ChartJS.register(
  ArcElement, // ‚úÖ ESSENTIEL POUR Pie/Doughnut Charts
  Tooltip,    // ‚úÖ Pour que les tooltips fonctionnent
  Legend      // Peut √™tre enregistr√© m√™me si d√©sactiv√© via options
);

interface PieChartProps {
  data: ChartData<'pie'>;
  options?: ChartOptions<'pie'>;
  // Vous pourriez aussi vouloir passer des callbacks sp√©cifiques si vous activez la gestion du clic sur les segments
  // onSegmentClick?: (element: any, index: number) => void;
}

const PieChart: React.FC<PieChartProps> = ({ data, options /*, onSegmentClick */ }) => {

   // Options par d√©faut pour un Pie Chart
   const defaultOptions: ChartOptions<'pie'> = {
        responsive: true,
        maintainAspectRatio: false, // Important si le conteneur a une hauteur d√©finie
        plugins: {
            legend: {
                display: false, // On utilise une l√©gende custom externe
            },
            tooltip: {
                // Mode et intersect par d√©faut conviennent bien
                 mode: 'index',
                 intersect: false,
                // Vous pouvez ajouter des callbacks sp√©cifiques si le formatage par d√©faut ne suffit pas
                 callbacks: {
                      label: (context) => {
                         // Formatage standard du label + pourcentage
                          let label = context.label || '';
                          if (label) {
                              label += ': ';
                          }
                          const value = context.parsed;
                          // Calculer le pourcentage
                           const total = context.dataset.data.reduce((sum: any, val: any) => sum + val, 0); // Total de toutes les valeurs du dataset
                          const percentage = total > 0 ? ((value / total) * 100) : 0;

                           label += `${value.toLocaleString()} (${percentage.toFixed(1)}%)`;

                           // Si vous avez des labels complexes n√©cessitant traduction/mapping, cela se fait ici
                           // Ex: if (label === 'true') label = t('with_delivery_label');

                          return label;
                      },
                      //@ts-ignore
                      title: (context) => context.label // Le titre du tooltip est juste le label de la tranche
                 }
            }
        },
         // Pas de 'scales' visibles pour un Pie Chart simple
        scales: {}
    };

   // Fusionner les options personnalis√©es, en assurant que legend display reste false
   const finalOptions: ChartOptions<'pie'> = {
        ...defaultOptions,
        ...options, // Options pass√©es en prop peuvent surcharger le reste...
        plugins: { // ...sauf le param√®tre legend display, qui doit rester false
             ...defaultOptions.plugins,
            ...options?.plugins,
             legend: { display: false } // Toujours d√©sactiver la l√©gende Chart.js
        },
        // On peut fusionner d'autres sections imbriqu√©es ici si besoin (ex: tooltip)
        //@ts-ignore
        tooltip: {
             ...defaultOptions.plugins?.tooltip, // Copie les callbacks par d√©faut
             ...options?.plugins?.tooltip, // Permet de surcharger les callbacks
             callbacks: {
                  ...defaultOptions.plugins?.tooltip?.callbacks, // Assure que les callbacks par d√©faut sont pr√©sents
                   ...options?.plugins?.tooltip?.callbacks // Les callbacks pass√©s via options √©crasent/ajoutent
              }
         }
    };

    // Pr√©parer l'objet data pass√© √† Chart.js (juste une copie ou l√©g√®re transformation si n√©cessaire)
    const chartJsData = useMemo(() => {
         // Si vous voulez des labels dans les donn√©es diff√©rentes des labels pour la l√©gende, transformez-les ici.
         // Pour l'instant, les labels sont directs dans DimensionBreakdown via pieChartData
         return data;
    }, [data]); // Ne se met √† jour que si les donn√©es changent


   return (
      // D√©finir une hauteur fixe ou utiliser des classes Tailwind comme discut√©
      // Assurer que le conteneur a bien une taille (width/height) pour Chart.js
      <div className="w-full h-full flex items-center justify-center"> {/* flex container for centering */}
          <div className="w-full h-full max-w-xs max-h-xs"> {/* Constraint size if needed */}
                {/*
                Ajoutez un gestionnaire d'√©v√©nement onClick sur la div ou sur la toile du graphique
                si vous souhaitez que les CLICS SUR LES SEGMENTS d√©clenchent une action (comme la navigation)
                 Plut√¥t que les clics sur la liste dans DimensionBreakdown.
                Chart.js supporte les √©v√©nements et fournit les √©l√©ments cliqu√©s.
                Pour cela, vous utiliseriez une fonction similaire √† handleItemClick,
                mais d√©clench√©e ici, en utilisant les donn√©es pass√©es ou une prop onSegmentClick.
                */ }
              <Pie
                  data={chartJsData}
                  options={finalOptions}
                  // Ajoutez des plugins custom ou des √©v√©nements si n√©cessaires
              />
          </div>
      </div>
   );
};

export default PieChart;